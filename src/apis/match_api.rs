/*
 * xethlyx's api server
 *
 * Public APIs for use within whatever you want. These are ratelimited, so try to keep requests to a minimum.  Future use of the API will require an API key.  ## API Keys API keys need to be passed alongside every request. With an API key, you are also expected to adhere to the following guidelines:   - Do not share your API key.   - Data can be retained for a maximum of 30 days (this is to adhere with GDPR guidelines).  API keys can also be saved to the browser for convenience using the client login/logout APIs.  You can obtain an API key by asking staff in the [Eclipsis discord](https://discord.gg/AkDsUtz). 
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_match`]
#[derive(Clone, Debug, Default)]
pub struct GetMatchParams {
    /// Discord snowflake of match to return
    pub match_id: String
}


/// struct for typed successes of method [`get_match`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMatchSuccess {
    Status200(crate::models::Success4),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_match`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMatchError {
    Status401(crate::models::ApiError),
    Status404(crate::models::ApiError),
    UnknownValue(serde_json::Value),
}


pub async fn get_match(configuration: &configuration::Configuration, params: GetMatchParams) -> Result<ResponseContent<GetMatchSuccess>, Error<GetMatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let match_id = params.match_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/eclipsis/match/{matchId}", local_var_configuration.base_path, matchId=crate::apis::urlencode(match_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("API-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetMatchSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetMatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

